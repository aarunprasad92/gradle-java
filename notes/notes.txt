
What is gradle ?
-----------------
Gradle -> Build automation tool
compile, run tests, package into jar/war, docker images, deploy and run
all these can be automated by using gradle

old tools -> Ant, maven.
Ant -> Dependency management is not there in ant, lot of xml files, steep learning curve. easy to customize
maven -> use convention over configuration. pre defined folder structure. Has inbuild dep management.
    - problem with customization
gradle -> convention over configuration, customizable using DSL. Using Groovy/kotlin. No xml. Very easy to write domain specific build file.


Why gradle ?
------------
- gradle also used in groovy, c++ projects
- supports dependency management from repositories, maven central, maven local, Jcenter, File system
- Custom dependency scope unlike maven which has fixed scope
- incremental builds. Only compiles only changed files. faster.
- build cache
- supports a daemon process
- allows use of plugins jar/war/jacoco/bootRun
- DSL - groovy/kotlin
- CLI utility
- IDE support

Install gradle -> brew install gradle

- to list all the gradle tasks, gradle tasks --all

- to add a task, add in build.gradle

- to run a task, gradle taskName

- settings.gradle -> project name

- build.gradle -> plugins - knows how to create the tasks for the application and run

- gradle compileJava - creates the class files in the build folder

- gradle clean - deletes the build folder

- gradle test - runs unit tests and generate report in build/reports folder

- gradle will compile only the changed files.

- gradle jar - creates jar file in build/lib folder

- gradle run - runs the project by getting the main class from build.gradle

- dependencies are pulled from the repository -> mavenCentral/JCenter in the build.gradle

Repositories
------------
- location from where gradle pulls the dependencies.
- can have multiple repositories
- we can push the artefact to the repository for other projects to use
- Can add custom repository by giving the url
- gradle caches all the dependencies locally -> .gradle folder
- transitive dependencies are alspo pulled in

Configurations
---------------
- build - compiles, run tests, create jar/war
- sourceSets - src/main/java, src/test/java
- dependencies can be configured for compiling main/test, running main/test, that needs to go into the jar/war file
- implementation/testImplementation - configurations that comes with the java plugin
- Scopes in maven - compile, provided, runtime, test
    - configurations in gradle - implemetation, api, compileOnly, runtimeOnly, testImplementation, testCompileOnly, testRuntimeOnly
- compileOnly - available only for compilation. Unavailable during running the app.
- runtimeOnly - available only during runtime

Build phases
-------------
- every build in gradle needs to undergo three phases
    - Initialization -> Checks if proj is single or multi module. Creates objects for build.gradle
    - Configuration -> Constructs the DAG of the tasks in the build.gradle
    - Execution -> Runs the tasks

Gradle Daemon
--------------
gradle build --daemon -> executes the build task and also creates a background running process and subsequent builds will be much faster
- to not use the daemon process, gradle build --no-daemon

build.gradle vs pom.xml
-------------------------
- lot of common things. Plugins, dependencies
- scope in maven, configuration in gradle
- both follows convention over configuration
- gradle is cutomizable because of using groovy instead of xml